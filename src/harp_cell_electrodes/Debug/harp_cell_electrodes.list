
harp_cell_electrodes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b0c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001bcc  08001bcc  00011bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bfc  08001bfc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001bfc  08001bfc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bfc  08001bfc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bfc  08001bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c00  08001c00  00011c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08001c10  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001c10  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006711  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001611  00000000  00000000  00026745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  00027d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000600  00000000  00000000  00028420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e596  00000000  00000000  00028a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000976a  00000000  00000000  00036fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005492e  00000000  00000000  00040720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009504e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016c4  00000000  00000000  000950a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001bb4 	.word	0x08001bb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001bb4 	.word	0x08001bb4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <lcd_string>:
static void lcd_put (uint8_t character, enum TypeOfCharacter ch_type);
static void lcd_write4bits(uint8_t value);

//============================================================================

void lcd_string(uint8_t *string_to_print) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t count=0;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  while (string_to_print[count] != 0) {
 800022c:	e00d      	b.n	800024a <lcd_string+0x2a>
    lcd_put (string_to_print[count], TEXT);
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	18d3      	adds	r3, r2, r3
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2101      	movs	r1, #1
 8000238:	0018      	movs	r0, r3
 800023a:	f000 f8a3 	bl	8000384 <lcd_put>
    delay(43); // a DRAM write requires at least 43 us execution time
 800023e:	202b      	movs	r0, #43	; 0x2b
 8000240:	f000 f938 	bl	80004b4 <delay>
    count++;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	3301      	adds	r3, #1
 8000248:	60fb      	str	r3, [r7, #12]
  while (string_to_print[count] != 0) {
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	18d3      	adds	r3, r2, r3
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d1eb      	bne.n	800022e <lcd_string+0xe>
  }
}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	b004      	add	sp, #16
 800025e:	bd80      	pop	{r7, pc}

08000260 <lcd_init>:
  lcd_string(line2);
}

//============================================================================

void lcd_init () {
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /*This function sets up the port lines for the LCD and initializes
  the LCD module for use.*/
  // set the relevant pins to outputs
  RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000264:	4b37      	ldr	r3, [pc, #220]	; (8000344 <lcd_init+0xe4>)
 8000266:	695a      	ldr	r2, [r3, #20]
 8000268:	4b36      	ldr	r3, [pc, #216]	; (8000344 <lcd_init+0xe4>)
 800026a:	2180      	movs	r1, #128	; 0x80
 800026c:	0309      	lsls	r1, r1, #12
 800026e:	430a      	orrs	r2, r1
 8000270:	615a      	str	r2, [r3, #20]
  RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000272:	4b34      	ldr	r3, [pc, #208]	; (8000344 <lcd_init+0xe4>)
 8000274:	695a      	ldr	r2, [r3, #20]
 8000276:	4b33      	ldr	r3, [pc, #204]	; (8000344 <lcd_init+0xe4>)
 8000278:	2180      	movs	r1, #128	; 0x80
 800027a:	02c9      	lsls	r1, r1, #11
 800027c:	430a      	orrs	r2, r1
 800027e:	615a      	str	r2, [r3, #20]
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000280:	4b30      	ldr	r3, [pc, #192]	; (8000344 <lcd_init+0xe4>)
 8000282:	695a      	ldr	r2, [r3, #20]
 8000284:	4b2f      	ldr	r3, [pc, #188]	; (8000344 <lcd_init+0xe4>)
 8000286:	2180      	movs	r1, #128	; 0x80
 8000288:	0289      	lsls	r1, r1, #10
 800028a:	430a      	orrs	r2, r1
 800028c:	615a      	str	r2, [r3, #20]
  GPIOC->MODER |= GPIO_MODER_MODER14_0;
 800028e:	4b2e      	ldr	r3, [pc, #184]	; (8000348 <lcd_init+0xe8>)
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4b2d      	ldr	r3, [pc, #180]	; (8000348 <lcd_init+0xe8>)
 8000294:	2180      	movs	r1, #128	; 0x80
 8000296:	0549      	lsls	r1, r1, #21
 8000298:	430a      	orrs	r2, r1
 800029a:	601a      	str	r2, [r3, #0]
  GPIOC->MODER |= GPIO_MODER_MODER15_0;
 800029c:	4b2a      	ldr	r3, [pc, #168]	; (8000348 <lcd_init+0xe8>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b29      	ldr	r3, [pc, #164]	; (8000348 <lcd_init+0xe8>)
 80002a2:	2180      	movs	r1, #128	; 0x80
 80002a4:	05c9      	lsls	r1, r1, #23
 80002a6:	430a      	orrs	r2, r1
 80002a8:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |= GPIO_MODER_MODER8_0;
 80002aa:	4b28      	ldr	r3, [pc, #160]	; (800034c <lcd_init+0xec>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b27      	ldr	r3, [pc, #156]	; (800034c <lcd_init+0xec>)
 80002b0:	2180      	movs	r1, #128	; 0x80
 80002b2:	0249      	lsls	r1, r1, #9
 80002b4:	430a      	orrs	r2, r1
 80002b6:	601a      	str	r2, [r3, #0]
  GPIOB->MODER |= GPIO_MODER_MODER9_0;
 80002b8:	4b24      	ldr	r3, [pc, #144]	; (800034c <lcd_init+0xec>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	4b23      	ldr	r3, [pc, #140]	; (800034c <lcd_init+0xec>)
 80002be:	2180      	movs	r1, #128	; 0x80
 80002c0:	02c9      	lsls	r1, r1, #11
 80002c2:	430a      	orrs	r2, r1
 80002c4:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |= GPIO_MODER_MODER12_0;
 80002c6:	2390      	movs	r3, #144	; 0x90
 80002c8:	05db      	lsls	r3, r3, #23
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	2390      	movs	r3, #144	; 0x90
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	2180      	movs	r1, #128	; 0x80
 80002d2:	0449      	lsls	r1, r1, #17
 80002d4:	430a      	orrs	r2, r1
 80002d6:	601a      	str	r2, [r3, #0]
  GPIOA->MODER |= GPIO_MODER_MODER15_0;
 80002d8:	2390      	movs	r3, #144	; 0x90
 80002da:	05db      	lsls	r3, r3, #23
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	2390      	movs	r3, #144	; 0x90
 80002e0:	05db      	lsls	r3, r3, #23
 80002e2:	2180      	movs	r1, #128	; 0x80
 80002e4:	05c9      	lsls	r1, r1, #23
 80002e6:	430a      	orrs	r2, r1
 80002e8:	601a      	str	r2, [r3, #0]

  delay(30000); //allow the LCD 30 ms power up time
 80002ea:	4b19      	ldr	r3, [pc, #100]	; (8000350 <lcd_init+0xf0>)
 80002ec:	0018      	movs	r0, r3
 80002ee:	f000 f8e1 	bl	80004b4 <delay>
  // in case in 2nd nibble of 4 bit tansfer, this goes to 1st nibble
  // if byte in 8-bit mode, keeps in 8-bit mode
  lcd_write4bits(0x03);
 80002f2:	2003      	movs	r0, #3
 80002f4:	f000 f878 	bl	80003e8 <lcd_write4bits>
  delay(4100);
 80002f8:	4b16      	ldr	r3, [pc, #88]	; (8000354 <lcd_init+0xf4>)
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 f8da 	bl	80004b4 <delay>
  lcd_write4bits(0x03);  // garanteed to be byte of 8-bit data for first byte of 4-bit.
 8000300:	2003      	movs	r0, #3
 8000302:	f000 f871 	bl	80003e8 <lcd_write4bits>
  delay(39);
 8000306:	2027      	movs	r0, #39	; 0x27
 8000308:	f000 f8d4 	bl	80004b4 <delay>
  lcd_write4bits(0x03); // necessary in case this is the 2nd nibble of 4-bit transfer.
 800030c:	2003      	movs	r0, #3
 800030e:	f000 f86b 	bl	80003e8 <lcd_write4bits>
  delay(39);
 8000312:	2027      	movs	r0, #39	; 0x27
 8000314:	f000 f8ce 	bl	80004b4 <delay>
  // switch to 4-bit. This will latch in a byte as it's garanteed to now be in 8-bit
  lcd_write4bits(0x02);
 8000318:	2002      	movs	r0, #2
 800031a:	f000 f865 	bl	80003e8 <lcd_write4bits>
  delay(39);
 800031e:	2027      	movs	r0, #39	; 0x27
 8000320:	f000 f8c8 	bl	80004b4 <delay>
  lcd_command(LCD_FOUR_BIT_TWO_LINE_MODE); //0x28
 8000324:	2028      	movs	r0, #40	; 0x28
 8000326:	f000 f817 	bl	8000358 <lcd_command>
  lcd_command(LCD_DISPLAY_OFF); // 0x08
 800032a:	2008      	movs	r0, #8
 800032c:	f000 f814 	bl	8000358 <lcd_command>
  lcd_command(LCD_CLEAR_DISPLAY); // 0x01
 8000330:	2001      	movs	r0, #1
 8000332:	f000 f811 	bl	8000358 <lcd_command>
  lcd_command(LCD_DISPLAY_ON); // 0x0C
 8000336:	200c      	movs	r0, #12
 8000338:	f000 f80e 	bl	8000358 <lcd_command>
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	46c0      	nop			; (mov r8, r8)
 8000344:	40021000 	.word	0x40021000
 8000348:	48000800 	.word	0x48000800
 800034c:	48000400 	.word	0x48000400
 8000350:	00007530 	.word	0x00007530
 8000354:	00001004 	.word	0x00001004

08000358 <lcd_command>:

//============================================================================

void lcd_command (enum LcdCommand command) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	0002      	movs	r2, r0
 8000360:	1dfb      	adds	r3, r7, #7
 8000362:	701a      	strb	r2, [r3, #0]
  //This function sends a command to the LCD.
  //Care is taken not to interfere with the other lines on the port.
  lcd_put((uint8_t)command, COMMAND);
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2100      	movs	r1, #0
 800036a:	0018      	movs	r0, r3
 800036c:	f000 f80a 	bl	8000384 <lcd_put>
  delay(1530); // 1.53 ms is the maximum delay we should need for any command.
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <lcd_command+0x28>)
 8000372:	0018      	movs	r0, r3
 8000374:	f000 f89e 	bl	80004b4 <delay>
  // TODO: fix the above to have variable lengths as required by different commands.
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b002      	add	sp, #8
 800037e:	bd80      	pop	{r7, pc}
 8000380:	000005fa 	.word	0x000005fa

08000384 <lcd_put>:

//============================================================================

static void lcd_put (uint8_t character, enum TypeOfCharacter ch_type) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	0002      	movs	r2, r0
 800038c:	1dfb      	adds	r3, r7, #7
 800038e:	701a      	strb	r2, [r3, #0]
 8000390:	1dbb      	adds	r3, r7, #6
 8000392:	1c0a      	adds	r2, r1, #0
 8000394:	701a      	strb	r2, [r3, #0]
    //Puts a single character on the LCD at the next position on the screen.
    //The character to be printed is in the input parameter. For numbers, letters
    //and other common characters the ASCII code will produce correct display.
    //Refer to the Hitachi HD44780 datasheet for full character set information.
    if (ch_type == TEXT) {
 8000396:	1dbb      	adds	r3, r7, #6
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d107      	bne.n	80003ae <lcd_put+0x2a>
        GPIOC->BSRR |= GPIO_BSRR_BS_14;// pull RS (PC14) high
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <lcd_put+0x60>)
 80003a0:	699a      	ldr	r2, [r3, #24]
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <lcd_put+0x60>)
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	01c9      	lsls	r1, r1, #7
 80003a8:	430a      	orrs	r2, r1
 80003aa:	619a      	str	r2, [r3, #24]
 80003ac:	e00a      	b.n	80003c4 <lcd_put+0x40>
    } else if (ch_type == COMMAND) {
 80003ae:	1dbb      	adds	r3, r7, #6
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d106      	bne.n	80003c4 <lcd_put+0x40>
        GPIOC->BSRR |= GPIO_BSRR_BR_14;// pull RS (PC14) low
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <lcd_put+0x60>)
 80003b8:	699a      	ldr	r2, [r3, #24]
 80003ba:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <lcd_put+0x60>)
 80003bc:	2180      	movs	r1, #128	; 0x80
 80003be:	05c9      	lsls	r1, r1, #23
 80003c0:	430a      	orrs	r2, r1
 80003c2:	619a      	str	r2, [r3, #24]
    }
    // write upper nibble
    lcd_write4bits(character >> 4);
 80003c4:	1dfb      	adds	r3, r7, #7
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	091b      	lsrs	r3, r3, #4
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	0018      	movs	r0, r3
 80003ce:	f000 f80b 	bl	80003e8 <lcd_write4bits>
    // write lower nibble
    lcd_write4bits(character);
 80003d2:	1dfb      	adds	r3, r7, #7
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 f806 	bl	80003e8 <lcd_write4bits>
}
 80003dc:	46c0      	nop			; (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b002      	add	sp, #8
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	48000800 	.word	0x48000800

080003e8 <lcd_write4bits>:

// This function outputs the lower 4 bits onto the data lines
static void lcd_write4bits(uint8_t character) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	0002      	movs	r2, r0
 80003f0:	1dfb      	adds	r3, r7, #7
 80003f2:	701a      	strb	r2, [r3, #0]
  // lower nibble to data lines
  if ((character & 0x08) != 0) {
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2208      	movs	r2, #8
 80003fa:	4013      	ands	r3, r2
 80003fc:	d009      	beq.n	8000412 <lcd_write4bits+0x2a>
    GPIOA->BSRR |= GPIO_BSRR_BS_15;
 80003fe:	2390      	movs	r3, #144	; 0x90
 8000400:	05db      	lsls	r3, r3, #23
 8000402:	699a      	ldr	r2, [r3, #24]
 8000404:	2390      	movs	r3, #144	; 0x90
 8000406:	05db      	lsls	r3, r3, #23
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	0209      	lsls	r1, r1, #8
 800040c:	430a      	orrs	r2, r1
 800040e:	619a      	str	r2, [r3, #24]
 8000410:	e008      	b.n	8000424 <lcd_write4bits+0x3c>
  } else {
    GPIOA->BSRR |= GPIO_BSRR_BR_15;
 8000412:	2390      	movs	r3, #144	; 0x90
 8000414:	05db      	lsls	r3, r3, #23
 8000416:	699a      	ldr	r2, [r3, #24]
 8000418:	2390      	movs	r3, #144	; 0x90
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	0609      	lsls	r1, r1, #24
 8000420:	430a      	orrs	r2, r1
 8000422:	619a      	str	r2, [r3, #24]
  }
  if ((character & 0x04) != 0) {
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2204      	movs	r2, #4
 800042a:	4013      	ands	r3, r2
 800042c:	d009      	beq.n	8000442 <lcd_write4bits+0x5a>
    GPIOA->BSRR |= GPIO_BSRR_BS_12;
 800042e:	2390      	movs	r3, #144	; 0x90
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	699a      	ldr	r2, [r3, #24]
 8000434:	2390      	movs	r3, #144	; 0x90
 8000436:	05db      	lsls	r3, r3, #23
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	0149      	lsls	r1, r1, #5
 800043c:	430a      	orrs	r2, r1
 800043e:	619a      	str	r2, [r3, #24]
 8000440:	e008      	b.n	8000454 <lcd_write4bits+0x6c>
  } else {
    GPIOA->BSRR |= GPIO_BSRR_BR_12;
 8000442:	2390      	movs	r3, #144	; 0x90
 8000444:	05db      	lsls	r3, r3, #23
 8000446:	699a      	ldr	r2, [r3, #24]
 8000448:	2390      	movs	r3, #144	; 0x90
 800044a:	05db      	lsls	r3, r3, #23
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	0549      	lsls	r1, r1, #21
 8000450:	430a      	orrs	r2, r1
 8000452:	619a      	str	r2, [r3, #24]
  }
  if ((character & 0x02) != 0) {
 8000454:	1dfb      	adds	r3, r7, #7
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2202      	movs	r2, #2
 800045a:	4013      	ands	r3, r2
 800045c:	d007      	beq.n	800046e <lcd_write4bits+0x86>
    GPIOB->BSRR |= GPIO_BSRR_BS_9;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <lcd_write4bits+0xc8>)
 8000460:	699a      	ldr	r2, [r3, #24]
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <lcd_write4bits+0xc8>)
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	0089      	lsls	r1, r1, #2
 8000468:	430a      	orrs	r2, r1
 800046a:	619a      	str	r2, [r3, #24]
 800046c:	e006      	b.n	800047c <lcd_write4bits+0x94>
  } else {
    GPIOB->BSRR |= GPIO_BSRR_BR_9;
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <lcd_write4bits+0xc8>)
 8000470:	699a      	ldr	r2, [r3, #24]
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <lcd_write4bits+0xc8>)
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	0489      	lsls	r1, r1, #18
 8000478:	430a      	orrs	r2, r1
 800047a:	619a      	str	r2, [r3, #24]
  }
  if ((character & 0x01) != 0) {
 800047c:	1dfb      	adds	r3, r7, #7
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2201      	movs	r2, #1
 8000482:	4013      	ands	r3, r2
 8000484:	d007      	beq.n	8000496 <lcd_write4bits+0xae>
    GPIOB->BSRR |= GPIO_BSRR_BS_8;
 8000486:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <lcd_write4bits+0xc8>)
 8000488:	699a      	ldr	r2, [r3, #24]
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <lcd_write4bits+0xc8>)
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	0049      	lsls	r1, r1, #1
 8000490:	430a      	orrs	r2, r1
 8000492:	619a      	str	r2, [r3, #24]
 8000494:	e006      	b.n	80004a4 <lcd_write4bits+0xbc>
  } else {
    GPIOB->BSRR |= GPIO_BSRR_BR_8;
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <lcd_write4bits+0xc8>)
 8000498:	699a      	ldr	r2, [r3, #24]
 800049a:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <lcd_write4bits+0xc8>)
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	0449      	lsls	r1, r1, #17
 80004a0:	430a      	orrs	r2, r1
 80004a2:	619a      	str	r2, [r3, #24]
  }
  pulse_strobe ();
 80004a4:	f000 f820 	bl	80004e8 <pulse_strobe>
}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b002      	add	sp, #8
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	48000400 	.word	0x48000400

080004b4 <delay>:

//============================================================================


static void delay(uint32_t microseconds) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  /* Hangs for specified number of microseconds. */
  volatile uint32_t counter = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  microseconds *= 3;
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	0013      	movs	r3, r2
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	189b      	adds	r3, r3, r2
 80004c8:	607b      	str	r3, [r7, #4]
  for(; counter<microseconds; counter++) {
 80004ca:	e004      	b.n	80004d6 <delay+0x22>
    __asm("nop");
 80004cc:	46c0      	nop			; (mov r8, r8)
    __asm("nop");
 80004ce:	46c0      	nop			; (mov r8, r8)
  for(; counter<microseconds; counter++) {
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d8f6      	bhi.n	80004cc <delay+0x18>
  }
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <pulse_strobe>:

static void pulse_strobe (void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  //Pulse the strobe line of the LCD to indicate that data is ready.
  delay(1);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f7ff ffe1 	bl	80004b4 <delay>
  GPIOC->BSRR |= GPIO_BSRR_BS_15;// pull E (PC15) high
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <pulse_strobe+0x38>)
 80004f4:	699a      	ldr	r2, [r3, #24]
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <pulse_strobe+0x38>)
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	0209      	lsls	r1, r1, #8
 80004fc:	430a      	orrs	r2, r1
 80004fe:	619a      	str	r2, [r3, #24]
  delay(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f7ff ffd7 	bl	80004b4 <delay>
  GPIOC->BSRR |= GPIO_BSRR_BR_15;// pull E (PC15) low
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <pulse_strobe+0x38>)
 8000508:	699a      	ldr	r2, [r3, #24]
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <pulse_strobe+0x38>)
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	0609      	lsls	r1, r1, #24
 8000510:	430a      	orrs	r2, r1
 8000512:	619a      	str	r2, [r3, #24]
  delay(1);
 8000514:	2001      	movs	r0, #1
 8000516:	f7ff ffcd 	bl	80004b4 <delay>
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	48000800 	.word	0x48000800

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fa1b 	bl	8000964 <HAL_Init>
  lcd_init(); // set up LCD lines and send initialisation commands
 800052e:	f7ff fe97 	bl	8000260 <lcd_init>

  MX_GPIO_Init();
 8000532:	f000 f921 	bl	8000778 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000536:	f000 f8df 	bl	80006f8 <MX_I2C1_Init>

  /* USER CODE END Init */

  /* Configure the system clock */

  SystemClock_Config();
 800053a:	f000 f885 	bl	8000648 <SystemClock_Config>
  /* USER CODE END SysInit */


  /* USER CODE BEGIN 2 */
  // Switch LEDs on
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800053e:	4b41      	ldr	r3, [pc, #260]	; (8000644 <main+0x120>)
 8000540:	2200      	movs	r2, #0
 8000542:	2101      	movs	r1, #1
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fcb2 	bl	8000eae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800054a:	4b3e      	ldr	r3, [pc, #248]	; (8000644 <main+0x120>)
 800054c:	2201      	movs	r2, #1
 800054e:	2102      	movs	r1, #2
 8000550:	0018      	movs	r0, r3
 8000552:	f000 fcac 	bl	8000eae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000556:	4b3b      	ldr	r3, [pc, #236]	; (8000644 <main+0x120>)
 8000558:	2201      	movs	r2, #1
 800055a:	2104      	movs	r1, #4
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fca6 	bl	8000eae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000562:	4b38      	ldr	r3, [pc, #224]	; (8000644 <main+0x120>)
 8000564:	2201      	movs	r2, #1
 8000566:	2108      	movs	r1, #8
 8000568:	0018      	movs	r0, r3
 800056a:	f000 fca0 	bl	8000eae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800056e:	4b35      	ldr	r3, [pc, #212]	; (8000644 <main+0x120>)
 8000570:	2201      	movs	r2, #1
 8000572:	2110      	movs	r1, #16
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fc9a 	bl	8000eae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 800057a:	4b32      	ldr	r3, [pc, #200]	; (8000644 <main+0x120>)
 800057c:	2201      	movs	r2, #1
 800057e:	2120      	movs	r1, #32
 8000580:	0018      	movs	r0, r3
 8000582:	f000 fc94 	bl	8000eae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000586:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <main+0x120>)
 8000588:	2201      	movs	r2, #1
 800058a:	2140      	movs	r1, #64	; 0x40
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fc8e 	bl	8000eae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000592:	4b2c      	ldr	r3, [pc, #176]	; (8000644 <main+0x120>)
 8000594:	2201      	movs	r2, #1
 8000596:	2180      	movs	r1, #128	; 0x80
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fc88 	bl	8000eae <HAL_GPIO_WritePin>

  // Read values and store them
  uint8_t address = 0;
 800059e:	230f      	movs	r3, #15
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 8; i++)
 80005a6:	230e      	movs	r3, #14
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e01f      	b.n	80005f0 <main+0xcc>
  {
	 address |= (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0+i) << i);
 80005b0:	240e      	movs	r4, #14
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	3301      	adds	r3, #1
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <main+0x120>)
 80005be:	0019      	movs	r1, r3
 80005c0:	0010      	movs	r0, r2
 80005c2:	f000 fc57 	bl	8000e74 <HAL_GPIO_ReadPin>
 80005c6:	0003      	movs	r3, r0
 80005c8:	001a      	movs	r2, r3
 80005ca:	0021      	movs	r1, r4
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	409a      	lsls	r2, r3
 80005d2:	0013      	movs	r3, r2
 80005d4:	b25a      	sxtb	r2, r3
 80005d6:	200f      	movs	r0, #15
 80005d8:	183b      	adds	r3, r7, r0
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	4313      	orrs	r3, r2
 80005e0:	b25a      	sxtb	r2, r3
 80005e2:	183b      	adds	r3, r7, r0
 80005e4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 8; i++)
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	3201      	adds	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
 80005f0:	230e      	movs	r3, #14
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b07      	cmp	r3, #7
 80005f8:	d9da      	bls.n	80005b0 <main+0x8c>
  }

  uint8_t binaryString[8];
  for (int i = 7; i >= 0; --i)
 80005fa:	2307      	movs	r3, #7
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	e013      	b.n	8000628 <main+0x104>
    {
      binaryString[7 - i] = ((address >> i) & 1) ? '1' : '0';//check if this can be shortened
 8000600:	230f      	movs	r3, #15
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	411a      	asrs	r2, r3
 800060a:	0013      	movs	r3, r2
 800060c:	2201      	movs	r2, #1
 800060e:	4013      	ands	r3, r2
 8000610:	d001      	beq.n	8000616 <main+0xf2>
 8000612:	2131      	movs	r1, #49	; 0x31
 8000614:	e000      	b.n	8000618 <main+0xf4>
 8000616:	2130      	movs	r1, #48	; 0x30
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2207      	movs	r2, #7
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	003a      	movs	r2, r7
 8000620:	54d1      	strb	r1, [r2, r3]
  for (int i = 7; i >= 0; --i)
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	3b01      	subs	r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	2b00      	cmp	r3, #0
 800062c:	dae8      	bge.n	8000600 <main+0xdc>
    }
  binaryString[8] = '\0'; // Add null terminator
 800062e:	003b      	movs	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	721a      	strb	r2, [r3, #8]
  //uint8_t test[] = "Hi!";
  lcd_command(LCD_CLEAR_DISPLAY);
 8000634:	2001      	movs	r0, #1
 8000636:	f7ff fe8f 	bl	8000358 <lcd_command>
  lcd_string(binaryString);
 800063a:	003b      	movs	r3, r7
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff fdef 	bl	8000220 <lcd_string>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000642:	e7fe      	b.n	8000642 <main+0x11e>
 8000644:	48000400 	.word	0x48000400

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b095      	sub	sp, #84	; 0x54
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	2420      	movs	r4, #32
 8000650:	193b      	adds	r3, r7, r4
 8000652:	0018      	movs	r0, r3
 8000654:	2330      	movs	r3, #48	; 0x30
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f001 faa3 	bl	8001ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065e:	2310      	movs	r3, #16
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	0018      	movs	r0, r3
 8000664:	2310      	movs	r3, #16
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f001 fa9b 	bl	8001ba4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066e:	003b      	movs	r3, r7
 8000670:	0018      	movs	r0, r3
 8000672:	2310      	movs	r3, #16
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f001 fa94 	bl	8001ba4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	0021      	movs	r1, r4
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2202      	movs	r2, #2
 8000682:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2201      	movs	r2, #1
 8000688:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2210      	movs	r2, #16
 800068e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	187b      	adds	r3, r7, r1
 8000698:	0018      	movs	r0, r3
 800069a:	f000 fd53 	bl	8001144 <HAL_RCC_OscConfig>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006a2:	f000 f8a1 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	2110      	movs	r1, #16
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2207      	movs	r2, #7
 80006ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2100      	movs	r1, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 f857 	bl	8001778 <HAL_RCC_ClockConfig>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006ce:	f000 f88b 	bl	80007e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2220      	movs	r2, #32
 80006d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006d8:	003b      	movs	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006de:	003b      	movs	r3, r7
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 f96d 	bl	80019c0 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ea:	f000 f87d 	bl	80007e8 <Error_Handler>
  }
}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b015      	add	sp, #84	; 0x54
 80006f4:	bd90      	pop	{r4, r7, pc}
	...

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_I2C1_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <MX_I2C1_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_I2C1_Init+0x74>)
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <MX_I2C1_Init+0x7c>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_I2C1_Init+0x74>)
 8000710:	2201      	movs	r2, #1
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_I2C1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_I2C1_Init+0x74>)
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fbd7 	bl	8000ee8 <HAL_I2C_Init>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800073e:	f000 f853 	bl	80007e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_I2C1_Init+0x74>)
 8000744:	2100      	movs	r1, #0
 8000746:	0018      	movs	r0, r3
 8000748:	f000 fc64 	bl	8001014 <HAL_I2CEx_ConfigAnalogFilter>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000750:	f000 f84a 	bl	80007e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <MX_I2C1_Init+0x74>)
 8000756:	2100      	movs	r1, #0
 8000758:	0018      	movs	r0, r3
 800075a:	f000 fca7 	bl	80010ac <HAL_I2CEx_ConfigDigitalFilter>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000762:	f000 f841 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000028 	.word	0x20000028
 8000770:	40005400 	.word	0x40005400
 8000774:	2000090e 	.word	0x2000090e

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	0018      	movs	r0, r3
 8000782:	2314      	movs	r3, #20
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	f001 fa0c 	bl	8001ba4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_GPIO_Init+0x68>)
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_GPIO_Init+0x68>)
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	02c9      	lsls	r1, r1, #11
 8000796:	430a      	orrs	r2, r1
 8000798:	615a      	str	r2, [r3, #20]
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_GPIO_Init+0x68>)
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	02db      	lsls	r3, r3, #11
 80007a2:	4013      	ands	r3, r2
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_GPIO_Init+0x6c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	21ff      	movs	r1, #255	; 0xff
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fb7d 	bl	8000eae <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	22ff      	movs	r2, #255	; 0xff
 80007b8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2201      	movs	r2, #1
 80007be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <MX_GPIO_Init+0x6c>)
 80007d0:	0019      	movs	r1, r3
 80007d2:	0010      	movs	r0, r2
 80007d4:	f000 f9de 	bl	8000b94 <HAL_GPIO_Init>

}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b006      	add	sp, #24
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000400 	.word	0x48000400

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <HAL_MspInit+0x44>)
 80007fc:	699a      	ldr	r2, [r3, #24]
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_MspInit+0x44>)
 8000800:	2101      	movs	r1, #1
 8000802:	430a      	orrs	r2, r1
 8000804:	619a      	str	r2, [r3, #24]
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <HAL_MspInit+0x44>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	2201      	movs	r2, #1
 800080c:	4013      	ands	r3, r2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_MspInit+0x44>)
 8000814:	69da      	ldr	r2, [r3, #28]
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_MspInit+0x44>)
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	0549      	lsls	r1, r1, #21
 800081c:	430a      	orrs	r2, r1
 800081e:	61da      	str	r2, [r3, #28]
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <HAL_MspInit+0x44>)
 8000822:	69da      	ldr	r2, [r3, #28]
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	055b      	lsls	r3, r3, #21
 8000828:	4013      	ands	r3, r2
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b002      	add	sp, #8
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b08b      	sub	sp, #44	; 0x2c
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	2414      	movs	r4, #20
 8000846:	193b      	adds	r3, r7, r4
 8000848:	0018      	movs	r0, r3
 800084a:	2314      	movs	r3, #20
 800084c:	001a      	movs	r2, r3
 800084e:	2100      	movs	r1, #0
 8000850:	f001 f9a8 	bl	8001ba4 <memset>
  if(hi2c->Instance==I2C1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <HAL_I2C_MspInit+0x90>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d132      	bne.n	80008c4 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <HAL_I2C_MspInit+0x94>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <HAL_I2C_MspInit+0x94>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	02c9      	lsls	r1, r1, #11
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <HAL_I2C_MspInit+0x94>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	02db      	lsls	r3, r3, #11
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	22c0      	movs	r2, #192	; 0xc0
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2212      	movs	r2, #18
 8000888:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2203      	movs	r2, #3
 8000894:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2201      	movs	r2, #1
 800089a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	187b      	adds	r3, r7, r1
 800089e:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <HAL_I2C_MspInit+0x98>)
 80008a0:	0019      	movs	r1, r3
 80008a2:	0010      	movs	r0, r2
 80008a4:	f000 f976 	bl	8000b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_I2C_MspInit+0x94>)
 80008aa:	69da      	ldr	r2, [r3, #28]
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_I2C_MspInit+0x94>)
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	0389      	lsls	r1, r1, #14
 80008b2:	430a      	orrs	r2, r1
 80008b4:	61da      	str	r2, [r3, #28]
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_I2C_MspInit+0x94>)
 80008b8:	69da      	ldr	r2, [r3, #28]
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	039b      	lsls	r3, r3, #14
 80008be:	4013      	ands	r3, r2
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b00b      	add	sp, #44	; 0x2c
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	40005400 	.word	0x40005400
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48000400 	.word	0x48000400

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f87a 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000912:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000914:	f7ff fff7 	bl	8000906 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <LoopForever+0x6>)
  ldr r1, =_edata
 800091a:	490d      	ldr	r1, [pc, #52]	; (8000950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <LoopForever+0xe>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000930:	4c0a      	ldr	r4, [pc, #40]	; (800095c <LoopForever+0x16>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800093e:	f001 f90d 	bl	8001b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fdef 	bl	8000524 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   r0, =_estack
 8000948:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000954:	08001c04 	.word	0x08001c04
  ldr r2, =_sbss
 8000958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800095c:	20000080 	.word	0x20000080

08000960 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_IRQHandler>
	...

08000964 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <HAL_Init+0x24>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_Init+0x24>)
 800096e:	2110      	movs	r1, #16
 8000970:	430a      	orrs	r2, r1
 8000972:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f809 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097a:	f7ff ff3b 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_InitTick+0x5c>)
 8000996:	681c      	ldr	r4, [r3, #0]
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <HAL_InitTick+0x60>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	0019      	movs	r1, r3
 800099e:	23fa      	movs	r3, #250	; 0xfa
 80009a0:	0098      	lsls	r0, r3, #2
 80009a2:	f7ff fbb1 	bl	8000108 <__udivsi3>
 80009a6:	0003      	movs	r3, r0
 80009a8:	0019      	movs	r1, r3
 80009aa:	0020      	movs	r0, r4
 80009ac:	f7ff fbac 	bl	8000108 <__udivsi3>
 80009b0:	0003      	movs	r3, r0
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 f8e1 	bl	8000b7a <HAL_SYSTICK_Config>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	e00f      	b.n	80009e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b03      	cmp	r3, #3
 80009c4:	d80b      	bhi.n	80009de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	2301      	movs	r3, #1
 80009ca:	425b      	negs	r3, r3
 80009cc:	2200      	movs	r2, #0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 f8be 	bl	8000b50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_InitTick+0x64>)
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b003      	add	sp, #12
 80009e6:	bd90      	pop	{r4, r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <HAL_IncTick+0x1c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	001a      	movs	r2, r3
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x20>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	18d2      	adds	r2, r2, r3
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <HAL_IncTick+0x20>)
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000008 	.word	0x20000008
 8000a14:	2000007c 	.word	0x2000007c

08000a18 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <HAL_GetTick+0x10>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	2000007c 	.word	0x2000007c

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	0002      	movs	r2, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a40:	d828      	bhi.n	8000a94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a42:	4a2f      	ldr	r2, [pc, #188]	; (8000b00 <__NVIC_SetPriority+0xd4>)
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	33c0      	adds	r3, #192	; 0xc0
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	589b      	ldr	r3, [r3, r2]
 8000a52:	1dfa      	adds	r2, r7, #7
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	0011      	movs	r1, r2
 8000a58:	2203      	movs	r2, #3
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	00d2      	lsls	r2, r2, #3
 8000a5e:	21ff      	movs	r1, #255	; 0xff
 8000a60:	4091      	lsls	r1, r2
 8000a62:	000a      	movs	r2, r1
 8000a64:	43d2      	mvns	r2, r2
 8000a66:	401a      	ands	r2, r3
 8000a68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	019b      	lsls	r3, r3, #6
 8000a6e:	22ff      	movs	r2, #255	; 0xff
 8000a70:	401a      	ands	r2, r3
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	0018      	movs	r0, r3
 8000a78:	2303      	movs	r3, #3
 8000a7a:	4003      	ands	r3, r0
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a80:	481f      	ldr	r0, [pc, #124]	; (8000b00 <__NVIC_SetPriority+0xd4>)
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b25b      	sxtb	r3, r3
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	33c0      	adds	r3, #192	; 0xc0
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a92:	e031      	b.n	8000af8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a94:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <__NVIC_SetPriority+0xd8>)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	400b      	ands	r3, r1
 8000aa0:	3b08      	subs	r3, #8
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	3306      	adds	r3, #6
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	18d3      	adds	r3, r2, r3
 8000aaa:	3304      	adds	r3, #4
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	1dfa      	adds	r2, r7, #7
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	00d2      	lsls	r2, r2, #3
 8000aba:	21ff      	movs	r1, #255	; 0xff
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	43d2      	mvns	r2, r2
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	22ff      	movs	r2, #255	; 0xff
 8000acc:	401a      	ands	r2, r3
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	4003      	ands	r3, r0
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <__NVIC_SetPriority+0xd8>)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	001c      	movs	r4, r3
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	4023      	ands	r3, r4
 8000ae8:	3b08      	subs	r3, #8
 8000aea:	089b      	lsrs	r3, r3, #2
 8000aec:	430a      	orrs	r2, r1
 8000aee:	3306      	adds	r3, #6
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	18c3      	adds	r3, r0, r3
 8000af4:	3304      	adds	r3, #4
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b003      	add	sp, #12
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	e000e100 	.word	0xe000e100
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	1e5a      	subs	r2, r3, #1
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	045b      	lsls	r3, r3, #17
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d301      	bcc.n	8000b20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e010      	b.n	8000b42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <SysTick_Config+0x44>)
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	3a01      	subs	r2, #1
 8000b26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b28:	2301      	movs	r3, #1
 8000b2a:	425b      	negs	r3, r3
 8000b2c:	2103      	movs	r1, #3
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff ff7c 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x44>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x44>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	1c02      	adds	r2, r0, #0
 8000b60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b25b      	sxtb	r3, r3
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff ff5d 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b004      	add	sp, #16
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff ffbf 	bl	8000b08 <SysTick_Config>
 8000b8a:	0003      	movs	r3, r0
}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba2:	e14f      	b.n	8000e44 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2101      	movs	r1, #1
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	4091      	lsls	r1, r2
 8000bae:	000a      	movs	r2, r1
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d100      	bne.n	8000bbc <HAL_GPIO_Init+0x28>
 8000bba:	e140      	b.n	8000e3e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d005      	beq.n	8000bd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2203      	movs	r2, #3
 8000bce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d130      	bne.n	8000c36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	2203      	movs	r2, #3
 8000be0:	409a      	lsls	r2, r3
 8000be2:	0013      	movs	r3, r2
 8000be4:	43da      	mvns	r2, r3
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	68da      	ldr	r2, [r3, #12]
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	0013      	movs	r3, r2
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	43da      	mvns	r2, r3
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	091b      	lsrs	r3, r3, #4
 8000c20:	2201      	movs	r2, #1
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d017      	beq.n	8000c72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	43da      	mvns	r2, r3
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	409a      	lsls	r2, r3
 8000c64:	0013      	movs	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2203      	movs	r2, #3
 8000c78:	4013      	ands	r3, r2
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d123      	bne.n	8000cc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	08da      	lsrs	r2, r3, #3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3208      	adds	r2, #8
 8000c86:	0092      	lsls	r2, r2, #2
 8000c88:	58d3      	ldr	r3, [r2, r3]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2207      	movs	r2, #7
 8000c90:	4013      	ands	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	220f      	movs	r2, #15
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	691a      	ldr	r2, [r3, #16]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	2107      	movs	r1, #7
 8000caa:	400b      	ands	r3, r1
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	08da      	lsrs	r2, r3, #3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	0092      	lsls	r2, r2, #2
 8000cc2:	6939      	ldr	r1, [r7, #16]
 8000cc4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	409a      	lsls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	23c0      	movs	r3, #192	; 0xc0
 8000d00:	029b      	lsls	r3, r3, #10
 8000d02:	4013      	ands	r3, r2
 8000d04:	d100      	bne.n	8000d08 <HAL_GPIO_Init+0x174>
 8000d06:	e09a      	b.n	8000e3e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d08:	4b54      	ldr	r3, [pc, #336]	; (8000e5c <HAL_GPIO_Init+0x2c8>)
 8000d0a:	699a      	ldr	r2, [r3, #24]
 8000d0c:	4b53      	ldr	r3, [pc, #332]	; (8000e5c <HAL_GPIO_Init+0x2c8>)
 8000d0e:	2101      	movs	r1, #1
 8000d10:	430a      	orrs	r2, r1
 8000d12:	619a      	str	r2, [r3, #24]
 8000d14:	4b51      	ldr	r3, [pc, #324]	; (8000e5c <HAL_GPIO_Init+0x2c8>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d20:	4a4f      	ldr	r2, [pc, #316]	; (8000e60 <HAL_GPIO_Init+0x2cc>)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	3302      	adds	r3, #2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	589b      	ldr	r3, [r3, r2]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	2203      	movs	r2, #3
 8000d32:	4013      	ands	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	220f      	movs	r2, #15
 8000d38:	409a      	lsls	r2, r3
 8000d3a:	0013      	movs	r3, r2
 8000d3c:	43da      	mvns	r2, r3
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	2390      	movs	r3, #144	; 0x90
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d013      	beq.n	8000d76 <HAL_GPIO_Init+0x1e2>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a44      	ldr	r2, [pc, #272]	; (8000e64 <HAL_GPIO_Init+0x2d0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00d      	beq.n	8000d72 <HAL_GPIO_Init+0x1de>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a43      	ldr	r2, [pc, #268]	; (8000e68 <HAL_GPIO_Init+0x2d4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x1da>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a42      	ldr	r2, [pc, #264]	; (8000e6c <HAL_GPIO_Init+0x2d8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_GPIO_Init+0x1d6>
 8000d66:	2303      	movs	r3, #3
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x1e4>
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	e004      	b.n	8000d78 <HAL_GPIO_Init+0x1e4>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e002      	b.n	8000d78 <HAL_GPIO_Init+0x1e4>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <HAL_GPIO_Init+0x1e4>
 8000d76:	2300      	movs	r3, #0
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	2103      	movs	r1, #3
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	4093      	lsls	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d88:	4935      	ldr	r1, [pc, #212]	; (8000e60 <HAL_GPIO_Init+0x2cc>)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d96:	4b36      	ldr	r3, [pc, #216]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	035b      	lsls	r3, r3, #13
 8000dae:	4013      	ands	r3, r2
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	43da      	mvns	r2, r3
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	039b      	lsls	r3, r3, #14
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	029b      	lsls	r3, r3, #10
 8000e02:	4013      	ands	r3, r2
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	025b      	lsls	r3, r3, #9
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_GPIO_Init+0x2dc>)
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	40da      	lsrs	r2, r3
 8000e4c:	1e13      	subs	r3, r2, #0
 8000e4e:	d000      	beq.n	8000e52 <HAL_GPIO_Init+0x2be>
 8000e50:	e6a8      	b.n	8000ba4 <HAL_GPIO_Init+0x10>
  } 
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b006      	add	sp, #24
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010000 	.word	0x40010000
 8000e64:	48000400 	.word	0x48000400
 8000e68:	48000800 	.word	0x48000800
 8000e6c:	48000c00 	.word	0x48000c00
 8000e70:	40010400 	.word	0x40010400

08000e74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	000a      	movs	r2, r1
 8000e7e:	1cbb      	adds	r3, r7, #2
 8000e80:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	1cba      	adds	r2, r7, #2
 8000e88:	8812      	ldrh	r2, [r2, #0]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d004      	beq.n	8000e98 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000e8e:	230f      	movs	r3, #15
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	e003      	b.n	8000ea0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e98:	230f      	movs	r3, #15
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	18fb      	adds	r3, r7, r3
 8000ea4:	781b      	ldrb	r3, [r3, #0]
  }
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b004      	add	sp, #16
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	0008      	movs	r0, r1
 8000eb8:	0011      	movs	r1, r2
 8000eba:	1cbb      	adds	r3, r7, #2
 8000ebc:	1c02      	adds	r2, r0, #0
 8000ebe:	801a      	strh	r2, [r3, #0]
 8000ec0:	1c7b      	adds	r3, r7, #1
 8000ec2:	1c0a      	adds	r2, r1, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec6:	1c7b      	adds	r3, r7, #1
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d004      	beq.n	8000ed8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ece:	1cbb      	adds	r3, r7, #2
 8000ed0:	881a      	ldrh	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ed6:	e003      	b.n	8000ee0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ed8:	1cbb      	adds	r3, r7, #2
 8000eda:	881a      	ldrh	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e082      	b.n	8001000 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2241      	movs	r2, #65	; 0x41
 8000efe:	5c9b      	ldrb	r3, [r3, r2]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d107      	bne.n	8000f16 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2240      	movs	r2, #64	; 0x40
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff fc93 	bl	800083c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2241      	movs	r2, #65	; 0x41
 8000f1a:	2124      	movs	r1, #36	; 0x24
 8000f1c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	438a      	bics	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4934      	ldr	r1, [pc, #208]	; (8001008 <HAL_I2C_Init+0x120>)
 8000f38:	400a      	ands	r2, r1
 8000f3a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4931      	ldr	r1, [pc, #196]	; (800100c <HAL_I2C_Init+0x124>)
 8000f48:	400a      	ands	r2, r1
 8000f4a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d108      	bne.n	8000f66 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	0209      	lsls	r1, r1, #8
 8000f60:	430a      	orrs	r2, r1
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	e007      	b.n	8000f76 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2184      	movs	r1, #132	; 0x84
 8000f70:	0209      	lsls	r1, r1, #8
 8000f72:	430a      	orrs	r2, r1
 8000f74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d104      	bne.n	8000f88 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	491f      	ldr	r1, [pc, #124]	; (8001010 <HAL_I2C_Init+0x128>)
 8000f94:	430a      	orrs	r2, r1
 8000f96:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	491a      	ldr	r1, [pc, #104]	; (800100c <HAL_I2C_Init+0x124>)
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69d9      	ldr	r1, [r3, #28]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a1a      	ldr	r2, [r3, #32]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2241      	movs	r2, #65	; 0x41
 8000fec:	2120      	movs	r1, #32
 8000fee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2242      	movs	r2, #66	; 0x42
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	0018      	movs	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}
 8001008:	f0ffffff 	.word	0xf0ffffff
 800100c:	ffff7fff 	.word	0xffff7fff
 8001010:	02008000 	.word	0x02008000

08001014 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2241      	movs	r2, #65	; 0x41
 8001022:	5c9b      	ldrb	r3, [r3, r2]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b20      	cmp	r3, #32
 8001028:	d138      	bne.n	800109c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2240      	movs	r2, #64	; 0x40
 800102e:	5c9b      	ldrb	r3, [r3, r2]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d101      	bne.n	8001038 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001034:	2302      	movs	r3, #2
 8001036:	e032      	b.n	800109e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2240      	movs	r2, #64	; 0x40
 800103c:	2101      	movs	r1, #1
 800103e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2241      	movs	r2, #65	; 0x41
 8001044:	2124      	movs	r1, #36	; 0x24
 8001046:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2101      	movs	r1, #1
 8001054:	438a      	bics	r2, r1
 8001056:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4911      	ldr	r1, [pc, #68]	; (80010a8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001064:	400a      	ands	r2, r1
 8001066:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6819      	ldr	r1, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2101      	movs	r1, #1
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2241      	movs	r2, #65	; 0x41
 800108c:	2120      	movs	r1, #32
 800108e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2240      	movs	r2, #64	; 0x40
 8001094:	2100      	movs	r1, #0
 8001096:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	e000      	b.n	800109e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800109c:	2302      	movs	r3, #2
  }
}
 800109e:	0018      	movs	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b002      	add	sp, #8
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	ffffefff 	.word	0xffffefff

080010ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2241      	movs	r2, #65	; 0x41
 80010ba:	5c9b      	ldrb	r3, [r3, r2]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b20      	cmp	r3, #32
 80010c0:	d139      	bne.n	8001136 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2240      	movs	r2, #64	; 0x40
 80010c6:	5c9b      	ldrb	r3, [r3, r2]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e033      	b.n	8001138 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2240      	movs	r2, #64	; 0x40
 80010d4:	2101      	movs	r1, #1
 80010d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2241      	movs	r2, #65	; 0x41
 80010dc:	2124      	movs	r1, #36	; 0x24
 80010de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2101      	movs	r1, #1
 80010ec:	438a      	bics	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4a11      	ldr	r2, [pc, #68]	; (8001140 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	430a      	orrs	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2241      	movs	r2, #65	; 0x41
 8001126:	2120      	movs	r1, #32
 8001128:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2240      	movs	r2, #64	; 0x40
 800112e:	2100      	movs	r1, #0
 8001130:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001136:	2302      	movs	r3, #2
  }
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	b004      	add	sp, #16
 800113e:	bd80      	pop	{r7, pc}
 8001140:	fffff0ff 	.word	0xfffff0ff

08001144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e301      	b.n	800175a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2201      	movs	r2, #1
 800115c:	4013      	ands	r3, r2
 800115e:	d100      	bne.n	8001162 <HAL_RCC_OscConfig+0x1e>
 8001160:	e08d      	b.n	800127e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001162:	4bc3      	ldr	r3, [pc, #780]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	220c      	movs	r2, #12
 8001168:	4013      	ands	r3, r2
 800116a:	2b04      	cmp	r3, #4
 800116c:	d00e      	beq.n	800118c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800116e:	4bc0      	ldr	r3, [pc, #768]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	220c      	movs	r2, #12
 8001174:	4013      	ands	r3, r2
 8001176:	2b08      	cmp	r3, #8
 8001178:	d116      	bne.n	80011a8 <HAL_RCC_OscConfig+0x64>
 800117a:	4bbd      	ldr	r3, [pc, #756]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	025b      	lsls	r3, r3, #9
 8001182:	401a      	ands	r2, r3
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	025b      	lsls	r3, r3, #9
 8001188:	429a      	cmp	r2, r3
 800118a:	d10d      	bne.n	80011a8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	4bb8      	ldr	r3, [pc, #736]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	029b      	lsls	r3, r3, #10
 8001194:	4013      	ands	r3, r2
 8001196:	d100      	bne.n	800119a <HAL_RCC_OscConfig+0x56>
 8001198:	e070      	b.n	800127c <HAL_RCC_OscConfig+0x138>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d000      	beq.n	80011a4 <HAL_RCC_OscConfig+0x60>
 80011a2:	e06b      	b.n	800127c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e2d8      	b.n	800175a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d107      	bne.n	80011c0 <HAL_RCC_OscConfig+0x7c>
 80011b0:	4baf      	ldr	r3, [pc, #700]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4bae      	ldr	r3, [pc, #696]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	0249      	lsls	r1, r1, #9
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e02f      	b.n	8001220 <HAL_RCC_OscConfig+0xdc>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10c      	bne.n	80011e2 <HAL_RCC_OscConfig+0x9e>
 80011c8:	4ba9      	ldr	r3, [pc, #676]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4ba8      	ldr	r3, [pc, #672]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80011ce:	49a9      	ldr	r1, [pc, #676]	; (8001474 <HAL_RCC_OscConfig+0x330>)
 80011d0:	400a      	ands	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	4ba6      	ldr	r3, [pc, #664]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4ba5      	ldr	r3, [pc, #660]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80011da:	49a7      	ldr	r1, [pc, #668]	; (8001478 <HAL_RCC_OscConfig+0x334>)
 80011dc:	400a      	ands	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e01e      	b.n	8001220 <HAL_RCC_OscConfig+0xdc>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d10e      	bne.n	8001208 <HAL_RCC_OscConfig+0xc4>
 80011ea:	4ba1      	ldr	r3, [pc, #644]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4ba0      	ldr	r3, [pc, #640]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	02c9      	lsls	r1, r1, #11
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	4b9d      	ldr	r3, [pc, #628]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b9c      	ldr	r3, [pc, #624]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	0249      	lsls	r1, r1, #9
 8001202:	430a      	orrs	r2, r1
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	e00b      	b.n	8001220 <HAL_RCC_OscConfig+0xdc>
 8001208:	4b99      	ldr	r3, [pc, #612]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b98      	ldr	r3, [pc, #608]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 800120e:	4999      	ldr	r1, [pc, #612]	; (8001474 <HAL_RCC_OscConfig+0x330>)
 8001210:	400a      	ands	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	4b96      	ldr	r3, [pc, #600]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b95      	ldr	r3, [pc, #596]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 800121a:	4997      	ldr	r1, [pc, #604]	; (8001478 <HAL_RCC_OscConfig+0x334>)
 800121c:	400a      	ands	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d014      	beq.n	8001252 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fbf6 	bl	8000a18 <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001232:	f7ff fbf1 	bl	8000a18 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b64      	cmp	r3, #100	; 0x64
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e28a      	b.n	800175a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001244:	4b8a      	ldr	r3, [pc, #552]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	029b      	lsls	r3, r3, #10
 800124c:	4013      	ands	r3, r2
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0xee>
 8001250:	e015      	b.n	800127e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff fbe1 	bl	8000a18 <HAL_GetTick>
 8001256:	0003      	movs	r3, r0
 8001258:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fbdc 	bl	8000a18 <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e275      	b.n	800175a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	4b80      	ldr	r3, [pc, #512]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	029b      	lsls	r3, r3, #10
 8001276:	4013      	ands	r3, r2
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x118>
 800127a:	e000      	b.n	800127e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d100      	bne.n	800128a <HAL_RCC_OscConfig+0x146>
 8001288:	e069      	b.n	800135e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800128a:	4b79      	ldr	r3, [pc, #484]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	220c      	movs	r2, #12
 8001290:	4013      	ands	r3, r2
 8001292:	d00b      	beq.n	80012ac <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001294:	4b76      	ldr	r3, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	220c      	movs	r2, #12
 800129a:	4013      	ands	r3, r2
 800129c:	2b08      	cmp	r3, #8
 800129e:	d11c      	bne.n	80012da <HAL_RCC_OscConfig+0x196>
 80012a0:	4b73      	ldr	r3, [pc, #460]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	4013      	ands	r3, r2
 80012aa:	d116      	bne.n	80012da <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ac:	4b70      	ldr	r3, [pc, #448]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2202      	movs	r2, #2
 80012b2:	4013      	ands	r3, r2
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x17e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d001      	beq.n	80012c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e24b      	b.n	800175a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	4b6b      	ldr	r3, [pc, #428]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	22f8      	movs	r2, #248	; 0xf8
 80012c8:	4393      	bics	r3, r2
 80012ca:	0019      	movs	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	00da      	lsls	r2, r3, #3
 80012d2:	4b67      	ldr	r3, [pc, #412]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d8:	e041      	b.n	800135e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d024      	beq.n	800132c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e2:	4b63      	ldr	r3, [pc, #396]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b62      	ldr	r3, [pc, #392]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	430a      	orrs	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fb93 	bl	8000a18 <HAL_GetTick>
 80012f2:	0003      	movs	r3, r0
 80012f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff fb8e 	bl	8000a18 <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e227      	b.n	800175a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130a:	4b59      	ldr	r3, [pc, #356]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2202      	movs	r2, #2
 8001310:	4013      	ands	r3, r2
 8001312:	d0f1      	beq.n	80012f8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001314:	4b56      	ldr	r3, [pc, #344]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	22f8      	movs	r2, #248	; 0xf8
 800131a:	4393      	bics	r3, r2
 800131c:	0019      	movs	r1, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	00da      	lsls	r2, r3, #3
 8001324:	4b52      	ldr	r3, [pc, #328]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001326:	430a      	orrs	r2, r1
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e018      	b.n	800135e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132c:	4b50      	ldr	r3, [pc, #320]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fb6e 	bl	8000a18 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001342:	f7ff fb69 	bl	8000a18 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e202      	b.n	800175a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001354:	4b46      	ldr	r3, [pc, #280]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2202      	movs	r2, #2
 800135a:	4013      	ands	r3, r2
 800135c:	d1f1      	bne.n	8001342 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2208      	movs	r2, #8
 8001364:	4013      	ands	r3, r2
 8001366:	d036      	beq.n	80013d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d019      	beq.n	80013a4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001370:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001374:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001376:	2101      	movs	r1, #1
 8001378:	430a      	orrs	r2, r1
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fb4c 	bl	8000a18 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff fb47 	bl	8000a18 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1e0      	b.n	800175a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001398:	4b35      	ldr	r3, [pc, #212]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	2202      	movs	r2, #2
 800139e:	4013      	ands	r3, r2
 80013a0:	d0f1      	beq.n	8001386 <HAL_RCC_OscConfig+0x242>
 80013a2:	e018      	b.n	80013d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a4:	4b32      	ldr	r3, [pc, #200]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80013a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a8:	4b31      	ldr	r3, [pc, #196]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	438a      	bics	r2, r1
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fb32 	bl	8000a18 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff fb2d 	bl	8000a18 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1c6      	b.n	800175a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2202      	movs	r2, #2
 80013d2:	4013      	ands	r3, r2
 80013d4:	d1f1      	bne.n	80013ba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2204      	movs	r2, #4
 80013dc:	4013      	ands	r3, r2
 80013de:	d100      	bne.n	80013e2 <HAL_RCC_OscConfig+0x29e>
 80013e0:	e0b4      	b.n	800154c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e2:	201f      	movs	r0, #31
 80013e4:	183b      	adds	r3, r7, r0
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80013ec:	69da      	ldr	r2, [r3, #28]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	055b      	lsls	r3, r3, #21
 80013f2:	4013      	ands	r3, r2
 80013f4:	d110      	bne.n	8001418 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80013f8:	69da      	ldr	r2, [r3, #28]
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	0549      	lsls	r1, r1, #21
 8001400:	430a      	orrs	r2, r1
 8001402:	61da      	str	r2, [r3, #28]
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001406:	69da      	ldr	r2, [r3, #28]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	055b      	lsls	r3, r3, #21
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001412:	183b      	adds	r3, r7, r0
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_RCC_OscConfig+0x338>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4013      	ands	r3, r2
 8001422:	d11a      	bne.n	800145a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_RCC_OscConfig+0x338>)
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	0049      	lsls	r1, r1, #1
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001432:	f7ff faf1 	bl	8000a18 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143c:	f7ff faec 	bl	8000a18 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e185      	b.n	800175a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x338>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4013      	ands	r3, r2
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d10e      	bne.n	8001480 <HAL_RCC_OscConfig+0x33c>
 8001462:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001464:	6a1a      	ldr	r2, [r3, #32]
 8001466:	4b02      	ldr	r3, [pc, #8]	; (8001470 <HAL_RCC_OscConfig+0x32c>)
 8001468:	2101      	movs	r1, #1
 800146a:	430a      	orrs	r2, r1
 800146c:	621a      	str	r2, [r3, #32]
 800146e:	e035      	b.n	80014dc <HAL_RCC_OscConfig+0x398>
 8001470:	40021000 	.word	0x40021000
 8001474:	fffeffff 	.word	0xfffeffff
 8001478:	fffbffff 	.word	0xfffbffff
 800147c:	40007000 	.word	0x40007000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10c      	bne.n	80014a2 <HAL_RCC_OscConfig+0x35e>
 8001488:	4bb6      	ldr	r3, [pc, #728]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 800148a:	6a1a      	ldr	r2, [r3, #32]
 800148c:	4bb5      	ldr	r3, [pc, #724]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 800148e:	2101      	movs	r1, #1
 8001490:	438a      	bics	r2, r1
 8001492:	621a      	str	r2, [r3, #32]
 8001494:	4bb3      	ldr	r3, [pc, #716]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001496:	6a1a      	ldr	r2, [r3, #32]
 8001498:	4bb2      	ldr	r3, [pc, #712]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 800149a:	2104      	movs	r1, #4
 800149c:	438a      	bics	r2, r1
 800149e:	621a      	str	r2, [r3, #32]
 80014a0:	e01c      	b.n	80014dc <HAL_RCC_OscConfig+0x398>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x380>
 80014aa:	4bae      	ldr	r3, [pc, #696]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80014ac:	6a1a      	ldr	r2, [r3, #32]
 80014ae:	4bad      	ldr	r3, [pc, #692]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80014b0:	2104      	movs	r1, #4
 80014b2:	430a      	orrs	r2, r1
 80014b4:	621a      	str	r2, [r3, #32]
 80014b6:	4bab      	ldr	r3, [pc, #684]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80014b8:	6a1a      	ldr	r2, [r3, #32]
 80014ba:	4baa      	ldr	r3, [pc, #680]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80014bc:	2101      	movs	r1, #1
 80014be:	430a      	orrs	r2, r1
 80014c0:	621a      	str	r2, [r3, #32]
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0x398>
 80014c4:	4ba7      	ldr	r3, [pc, #668]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80014c6:	6a1a      	ldr	r2, [r3, #32]
 80014c8:	4ba6      	ldr	r3, [pc, #664]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	438a      	bics	r2, r1
 80014ce:	621a      	str	r2, [r3, #32]
 80014d0:	4ba4      	ldr	r3, [pc, #656]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80014d2:	6a1a      	ldr	r2, [r3, #32]
 80014d4:	4ba3      	ldr	r3, [pc, #652]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80014d6:	2104      	movs	r1, #4
 80014d8:	438a      	bics	r2, r1
 80014da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d014      	beq.n	800150e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff fa98 	bl	8000a18 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ec:	e009      	b.n	8001502 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff fa93 	bl	8000a18 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	4a9b      	ldr	r2, [pc, #620]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e12b      	b.n	800175a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	4b98      	ldr	r3, [pc, #608]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	2202      	movs	r2, #2
 8001508:	4013      	ands	r3, r2
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x3aa>
 800150c:	e013      	b.n	8001536 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fa83 	bl	8000a18 <HAL_GetTick>
 8001512:	0003      	movs	r3, r0
 8001514:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001516:	e009      	b.n	800152c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff fa7e 	bl	8000a18 <HAL_GetTick>
 800151c:	0002      	movs	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	4a91      	ldr	r2, [pc, #580]	; (8001768 <HAL_RCC_OscConfig+0x624>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e116      	b.n	800175a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152c:	4b8d      	ldr	r3, [pc, #564]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	2202      	movs	r2, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001536:	231f      	movs	r3, #31
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001540:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001542:	69da      	ldr	r2, [r3, #28]
 8001544:	4b87      	ldr	r3, [pc, #540]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001546:	4989      	ldr	r1, [pc, #548]	; (800176c <HAL_RCC_OscConfig+0x628>)
 8001548:	400a      	ands	r2, r1
 800154a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2210      	movs	r2, #16
 8001552:	4013      	ands	r3, r2
 8001554:	d063      	beq.n	800161e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d12a      	bne.n	80015b4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800155e:	4b81      	ldr	r3, [pc, #516]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001562:	4b80      	ldr	r3, [pc, #512]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001564:	2104      	movs	r1, #4
 8001566:	430a      	orrs	r2, r1
 8001568:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800156a:	4b7e      	ldr	r3, [pc, #504]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 800156c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800156e:	4b7d      	ldr	r3, [pc, #500]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001570:	2101      	movs	r1, #1
 8001572:	430a      	orrs	r2, r1
 8001574:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001576:	f7ff fa4f 	bl	8000a18 <HAL_GetTick>
 800157a:	0003      	movs	r3, r0
 800157c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001580:	f7ff fa4a 	bl	8000a18 <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0e3      	b.n	800175a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001592:	4b74      	ldr	r3, [pc, #464]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001596:	2202      	movs	r2, #2
 8001598:	4013      	ands	r3, r2
 800159a:	d0f1      	beq.n	8001580 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800159c:	4b71      	ldr	r3, [pc, #452]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 800159e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a0:	22f8      	movs	r2, #248	; 0xf8
 80015a2:	4393      	bics	r3, r2
 80015a4:	0019      	movs	r1, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	00da      	lsls	r2, r3, #3
 80015ac:	4b6d      	ldr	r3, [pc, #436]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80015ae:	430a      	orrs	r2, r1
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
 80015b2:	e034      	b.n	800161e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	3305      	adds	r3, #5
 80015ba:	d111      	bne.n	80015e0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015bc:	4b69      	ldr	r3, [pc, #420]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80015be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c0:	4b68      	ldr	r3, [pc, #416]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80015c2:	2104      	movs	r1, #4
 80015c4:	438a      	bics	r2, r1
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015c8:	4b66      	ldr	r3, [pc, #408]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80015ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015cc:	22f8      	movs	r2, #248	; 0xf8
 80015ce:	4393      	bics	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	00da      	lsls	r2, r3, #3
 80015d8:	4b62      	ldr	r3, [pc, #392]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80015da:	430a      	orrs	r2, r1
 80015dc:	635a      	str	r2, [r3, #52]	; 0x34
 80015de:	e01e      	b.n	800161e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015e0:	4b60      	ldr	r3, [pc, #384]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80015e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e4:	4b5f      	ldr	r3, [pc, #380]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80015e6:	2104      	movs	r1, #4
 80015e8:	430a      	orrs	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80015ec:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80015ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f0:	4b5c      	ldr	r3, [pc, #368]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	438a      	bics	r2, r1
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f8:	f7ff fa0e 	bl	8000a18 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001602:	f7ff fa09 	bl	8000a18 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0a2      	b.n	800175a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001614:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001618:	2202      	movs	r2, #2
 800161a:	4013      	ands	r3, r2
 800161c:	d1f1      	bne.n	8001602 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d100      	bne.n	8001628 <HAL_RCC_OscConfig+0x4e4>
 8001626:	e097      	b.n	8001758 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001628:	4b4e      	ldr	r3, [pc, #312]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	220c      	movs	r2, #12
 800162e:	4013      	ands	r3, r2
 8001630:	2b08      	cmp	r3, #8
 8001632:	d100      	bne.n	8001636 <HAL_RCC_OscConfig+0x4f2>
 8001634:	e06b      	b.n	800170e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d14c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b49      	ldr	r3, [pc, #292]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b48      	ldr	r3, [pc, #288]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001644:	494a      	ldr	r1, [pc, #296]	; (8001770 <HAL_RCC_OscConfig+0x62c>)
 8001646:	400a      	ands	r2, r1
 8001648:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff f9e5 	bl	8000a18 <HAL_GetTick>
 800164e:	0003      	movs	r3, r0
 8001650:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff f9e0 	bl	8000a18 <HAL_GetTick>
 8001658:	0002      	movs	r2, r0
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e079      	b.n	800175a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001666:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	049b      	lsls	r3, r3, #18
 800166e:	4013      	ands	r3, r2
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001672:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	220f      	movs	r2, #15
 8001678:	4393      	bics	r3, r2
 800167a:	0019      	movs	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001680:	4b38      	ldr	r3, [pc, #224]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001682:	430a      	orrs	r2, r1
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
 8001686:	4b37      	ldr	r3, [pc, #220]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4a3a      	ldr	r2, [pc, #232]	; (8001774 <HAL_RCC_OscConfig+0x630>)
 800168c:	4013      	ands	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	431a      	orrs	r2, r3
 800169a:	4b32      	ldr	r3, [pc, #200]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 800169c:	430a      	orrs	r2, r1
 800169e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a0:	4b30      	ldr	r3, [pc, #192]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	0449      	lsls	r1, r1, #17
 80016aa:	430a      	orrs	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff f9b3 	bl	8000a18 <HAL_GetTick>
 80016b2:	0003      	movs	r3, r0
 80016b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff f9ae 	bl	8000a18 <HAL_GetTick>
 80016bc:	0002      	movs	r2, r0
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e047      	b.n	800175a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	049b      	lsls	r3, r3, #18
 80016d2:	4013      	ands	r3, r2
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x574>
 80016d6:	e03f      	b.n	8001758 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 80016de:	4924      	ldr	r1, [pc, #144]	; (8001770 <HAL_RCC_OscConfig+0x62c>)
 80016e0:	400a      	ands	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff f998 	bl	8000a18 <HAL_GetTick>
 80016e8:	0003      	movs	r3, r0
 80016ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff f993 	bl	8000a18 <HAL_GetTick>
 80016f2:	0002      	movs	r2, r0
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e02c      	b.n	800175a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	049b      	lsls	r3, r3, #18
 8001708:	4013      	ands	r3, r2
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x5aa>
 800170c:	e024      	b.n	8001758 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e01f      	b.n	800175a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_RCC_OscConfig+0x620>)
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	025b      	lsls	r3, r3, #9
 800172c:	401a      	ands	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	429a      	cmp	r2, r3
 8001734:	d10e      	bne.n	8001754 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	220f      	movs	r2, #15
 800173a:	401a      	ands	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d107      	bne.n	8001754 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	23f0      	movs	r3, #240	; 0xf0
 8001748:	039b      	lsls	r3, r3, #14
 800174a:	401a      	ands	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d001      	beq.n	8001758 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b008      	add	sp, #32
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	40021000 	.word	0x40021000
 8001768:	00001388 	.word	0x00001388
 800176c:	efffffff 	.word	0xefffffff
 8001770:	feffffff 	.word	0xfeffffff
 8001774:	ffc2ffff 	.word	0xffc2ffff

08001778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b3      	b.n	80018f4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b5b      	ldr	r3, [pc, #364]	; (80018fc <HAL_RCC_ClockConfig+0x184>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	4013      	ands	r3, r2
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d911      	bls.n	80017be <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b58      	ldr	r3, [pc, #352]	; (80018fc <HAL_RCC_ClockConfig+0x184>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4393      	bics	r3, r2
 80017a2:	0019      	movs	r1, r3
 80017a4:	4b55      	ldr	r3, [pc, #340]	; (80018fc <HAL_RCC_ClockConfig+0x184>)
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x184>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2201      	movs	r2, #1
 80017b2:	4013      	ands	r3, r2
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d001      	beq.n	80017be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e09a      	b.n	80018f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2202      	movs	r2, #2
 80017c4:	4013      	ands	r3, r2
 80017c6:	d015      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2204      	movs	r2, #4
 80017ce:	4013      	ands	r3, r2
 80017d0:	d006      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017d2:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4b4a      	ldr	r3, [pc, #296]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 80017d8:	21e0      	movs	r1, #224	; 0xe0
 80017da:	00c9      	lsls	r1, r1, #3
 80017dc:	430a      	orrs	r2, r1
 80017de:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	22f0      	movs	r2, #240	; 0xf0
 80017e6:	4393      	bics	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	4b44      	ldr	r3, [pc, #272]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 80017f0:	430a      	orrs	r2, r1
 80017f2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	d040      	beq.n	8001880 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	029b      	lsls	r3, r3, #10
 800180e:	4013      	ands	r3, r2
 8001810:	d114      	bne.n	800183c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e06e      	b.n	80018f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	049b      	lsls	r3, r3, #18
 8001826:	4013      	ands	r3, r2
 8001828:	d108      	bne.n	800183c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e062      	b.n	80018f4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b34      	ldr	r3, [pc, #208]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e05b      	b.n	80018f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2203      	movs	r2, #3
 8001842:	4393      	bics	r3, r2
 8001844:	0019      	movs	r1, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 800184c:	430a      	orrs	r2, r1
 800184e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001850:	f7ff f8e2 	bl	8000a18 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001858:	e009      	b.n	800186e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185a:	f7ff f8dd 	bl	8000a18 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	4a27      	ldr	r2, [pc, #156]	; (8001904 <HAL_RCC_ClockConfig+0x18c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e042      	b.n	80018f4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	220c      	movs	r2, #12
 8001874:	401a      	ands	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1ec      	bne.n	800185a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <HAL_RCC_ClockConfig+0x184>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2201      	movs	r2, #1
 8001886:	4013      	ands	r3, r2
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d211      	bcs.n	80018b2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_RCC_ClockConfig+0x184>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	4393      	bics	r3, r2
 8001896:	0019      	movs	r1, r3
 8001898:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_RCC_ClockConfig+0x184>)
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_RCC_ClockConfig+0x184>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2201      	movs	r2, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d001      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e020      	b.n	80018f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2204      	movs	r2, #4
 80018b8:	4013      	ands	r3, r2
 80018ba:	d009      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_RCC_ClockConfig+0x190>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	0019      	movs	r1, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 80018cc:	430a      	orrs	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018d0:	f000 f820 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80018d4:	0001      	movs	r1, r0
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_RCC_ClockConfig+0x188>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	220f      	movs	r2, #15
 80018de:	4013      	ands	r3, r2
 80018e0:	4a0a      	ldr	r2, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x194>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	000a      	movs	r2, r1
 80018e6:	40da      	lsrs	r2, r3
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x198>)
 80018ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f7ff f84d 	bl	800098c <HAL_InitTick>
  
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b004      	add	sp, #16
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40022000 	.word	0x40022000
 8001900:	40021000 	.word	0x40021000
 8001904:	00001388 	.word	0x00001388
 8001908:	fffff8ff 	.word	0xfffff8ff
 800190c:	08001bcc 	.word	0x08001bcc
 8001910:	20000000 	.word	0x20000000

08001914 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	220c      	movs	r2, #12
 8001938:	4013      	ands	r3, r2
 800193a:	2b04      	cmp	r3, #4
 800193c:	d002      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x30>
 800193e:	2b08      	cmp	r3, #8
 8001940:	d003      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x36>
 8001942:	e02c      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001946:	613b      	str	r3, [r7, #16]
      break;
 8001948:	e02c      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	0c9b      	lsrs	r3, r3, #18
 800194e:	220f      	movs	r2, #15
 8001950:	4013      	ands	r3, r2
 8001952:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	220f      	movs	r2, #15
 800195e:	4013      	ands	r3, r2
 8001960:	4a16      	ldr	r2, [pc, #88]	; (80019bc <HAL_RCC_GetSysClockFreq+0xa8>)
 8001962:	5cd3      	ldrb	r3, [r2, r3]
 8001964:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	025b      	lsls	r3, r3, #9
 800196c:	4013      	ands	r3, r2
 800196e:	d009      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	4810      	ldr	r0, [pc, #64]	; (80019b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001974:	f7fe fbc8 	bl	8000108 <__udivsi3>
 8001978:	0003      	movs	r3, r0
 800197a:	001a      	movs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4353      	muls	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e009      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	000a      	movs	r2, r1
 8001988:	0152      	lsls	r2, r2, #5
 800198a:	1a52      	subs	r2, r2, r1
 800198c:	0193      	lsls	r3, r2, #6
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	185b      	adds	r3, r3, r1
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
      break;
 800199c:	e002      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019a0:	613b      	str	r3, [r7, #16]
      break;
 80019a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019a4:	693b      	ldr	r3, [r7, #16]
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b006      	add	sp, #24
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	40021000 	.word	0x40021000
 80019b4:	007a1200 	.word	0x007a1200
 80019b8:	08001bdc 	.word	0x08001bdc
 80019bc:	08001bec 	.word	0x08001bec

080019c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	025b      	lsls	r3, r3, #9
 80019d8:	4013      	ands	r3, r2
 80019da:	d100      	bne.n	80019de <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80019dc:	e08e      	b.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2017      	movs	r0, #23
 80019e0:	183b      	adds	r3, r7, r0
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b57      	ldr	r3, [pc, #348]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019e8:	69da      	ldr	r2, [r3, #28]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	055b      	lsls	r3, r3, #21
 80019ee:	4013      	ands	r3, r2
 80019f0:	d110      	bne.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b54      	ldr	r3, [pc, #336]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0549      	lsls	r1, r1, #21
 80019fc:	430a      	orrs	r2, r1
 80019fe:	61da      	str	r2, [r3, #28]
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a02:	69da      	ldr	r2, [r3, #28]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	055b      	lsls	r3, r3, #21
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0e:	183b      	adds	r3, r7, r0
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d11a      	bne.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a20:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b48      	ldr	r3, [pc, #288]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0049      	lsls	r1, r1, #1
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2e:	f7fe fff3 	bl	8000a18 <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a36:	e008      	b.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a38:	f7fe ffee 	bl	8000a18 <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	; 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e077      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4a:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a56:	4b3b      	ldr	r3, [pc, #236]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a58:	6a1a      	ldr	r2, [r3, #32]
 8001a5a:	23c0      	movs	r3, #192	; 0xc0
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d034      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	23c0      	movs	r3, #192	; 0xc0
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d02c      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a33      	ldr	r2, [pc, #204]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a84:	6a1a      	ldr	r2, [r3, #32]
 8001a86:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	0249      	lsls	r1, r1, #9
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a90:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	4b2b      	ldr	r3, [pc, #172]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a96:	492e      	ldr	r1, [pc, #184]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a9c:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7fe ffb5 	bl	8000a18 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	e009      	b.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7fe ffb0 	bl	8000a18 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	4a25      	ldr	r2, [pc, #148]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e038      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	2202      	movs	r2, #2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae6:	2317      	movs	r3, #23
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af2:	69da      	ldr	r2, [r3, #28]
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af6:	4918      	ldr	r1, [pc, #96]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	d009      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	4393      	bics	r3, r2
 8001b0e:	0019      	movs	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b16:	430a      	orrs	r2, r1
 8001b18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	4013      	ands	r3, r2
 8001b22:	d009      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	2210      	movs	r2, #16
 8001b2a:	4393      	bics	r3, r2
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b34:	430a      	orrs	r2, r1
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b006      	add	sp, #24
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	fffffcff 	.word	0xfffffcff
 8001b50:	fffeffff 	.word	0xfffeffff
 8001b54:	00001388 	.word	0x00001388
 8001b58:	efffffff 	.word	0xefffffff

08001b5c <__libc_init_array>:
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	2600      	movs	r6, #0
 8001b60:	4d0c      	ldr	r5, [pc, #48]	; (8001b94 <__libc_init_array+0x38>)
 8001b62:	4c0d      	ldr	r4, [pc, #52]	; (8001b98 <__libc_init_array+0x3c>)
 8001b64:	1b64      	subs	r4, r4, r5
 8001b66:	10a4      	asrs	r4, r4, #2
 8001b68:	42a6      	cmp	r6, r4
 8001b6a:	d109      	bne.n	8001b80 <__libc_init_array+0x24>
 8001b6c:	2600      	movs	r6, #0
 8001b6e:	f000 f821 	bl	8001bb4 <_init>
 8001b72:	4d0a      	ldr	r5, [pc, #40]	; (8001b9c <__libc_init_array+0x40>)
 8001b74:	4c0a      	ldr	r4, [pc, #40]	; (8001ba0 <__libc_init_array+0x44>)
 8001b76:	1b64      	subs	r4, r4, r5
 8001b78:	10a4      	asrs	r4, r4, #2
 8001b7a:	42a6      	cmp	r6, r4
 8001b7c:	d105      	bne.n	8001b8a <__libc_init_array+0x2e>
 8001b7e:	bd70      	pop	{r4, r5, r6, pc}
 8001b80:	00b3      	lsls	r3, r6, #2
 8001b82:	58eb      	ldr	r3, [r5, r3]
 8001b84:	4798      	blx	r3
 8001b86:	3601      	adds	r6, #1
 8001b88:	e7ee      	b.n	8001b68 <__libc_init_array+0xc>
 8001b8a:	00b3      	lsls	r3, r6, #2
 8001b8c:	58eb      	ldr	r3, [r5, r3]
 8001b8e:	4798      	blx	r3
 8001b90:	3601      	adds	r6, #1
 8001b92:	e7f2      	b.n	8001b7a <__libc_init_array+0x1e>
 8001b94:	08001bfc 	.word	0x08001bfc
 8001b98:	08001bfc 	.word	0x08001bfc
 8001b9c:	08001bfc 	.word	0x08001bfc
 8001ba0:	08001c00 	.word	0x08001c00

08001ba4 <memset>:
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	1882      	adds	r2, r0, r2
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d100      	bne.n	8001bae <memset+0xa>
 8001bac:	4770      	bx	lr
 8001bae:	7019      	strb	r1, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	e7f9      	b.n	8001ba8 <memset+0x4>

08001bb4 <_init>:
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bba:	bc08      	pop	{r3}
 8001bbc:	469e      	mov	lr, r3
 8001bbe:	4770      	bx	lr

08001bc0 <_fini>:
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc6:	bc08      	pop	{r3}
 8001bc8:	469e      	mov	lr, r3
 8001bca:	4770      	bx	lr
